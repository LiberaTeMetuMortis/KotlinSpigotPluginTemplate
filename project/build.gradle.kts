import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.5/userguide/building_java_projects.html
 */
var pluginMainClass = ""
var pluginName = ""
File("${projectDir.absoluteFile}/src/main/resources/plugin.yml").forEachLine { line ->
    with(line){
        when {
            matches(Regex("^version: .+$")) -> project.version = replace(Regex("version: "), "").replace("\"", "").replace("'", "")
            matches(Regex("^name: .+$")) -> pluginName = replace(Regex("name: "), "").replace("\"", "").replace("'", "")
            matches(Regex("^main: .+$")) -> pluginMainClass = replace(Regex("main: "), "").replace("\"", "").replace("'", "")
        }
    }
}

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    id("com.github.johnrengelman.shadow") version "7.1.2"
    id("org.jetbrains.kotlin.jvm") version "1.6.21"

    // Apply the application plugin to add support for building a CLI application in Java.
    application

}
apply(plugin="java")
apply(plugin="org.jetbrains.kotlin.jvm")
apply(plugin="com.github.johnrengelman.shadow")


repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    maven("https://hub.spigotmc.org/nexus/content/repositories/public/")
    maven("https://repo.extendedclip.com/content/repositories/placeholderapi/")
}

dependencies {
    // Align versions of all Kotlin components
    implementation(platform("org.jetbrains.kotlin:kotlin-bom"))

    // Use the Kotlin JDK 8 standard library.
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")

    // You can add dependencies like this
    compileOnly(group="me.clip", name="placeholderapi", version="2.11.1")

    // Or like this
    compileOnly("org.spigotmc:spigot-api:1.18.1-R0.1-SNAPSHOT")
}

application {
    // Define the main class for the application.
    mainClass.set(pluginMainClass)
}

tasks.withType<org.jetbrains.kotlin.gradle.tasks.KotlinCompile> {
    kotlinOptions {
        jvmTarget = "17"
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}


tasks.withType<Jar> {
    archiveFileName.set("${pluginName}-${project.version}.jar")
    manifest {
        attributes["Main-Class"] = pluginMainClass
    }

}

tasks.withType<ShadowJar>{
    archiveFileName.set("${pluginName}-${project.version}-all.jar")
}

open class MultiVersionPlugin : DefaultTask() {
    override fun getGroup(): String {
        return "application"
    }

    @Optional
    @get:Input
    @set:Option(
        option = "versions",
        description = "Configures versions that will built."
    )
    var versions: String? = null

    @TaskAction
    fun create() {
        val dir = project.projectDir
        val rootDir = project.rootDir
        if(versions == null) versions = "all"
        val allVersions = arrayListOf(
            "1.18", "1.17", "1.16", "1.15", "1.14",
            "1.13", "1.12", "1.11", "1.10", "1.9", "1.8"
        )
        var selectedVersions = versions!!.split(",")
        if(versions == "all") selectedVersions = allVersions
        val versionsToBuild = allVersions.filter { selectedVersions.contains(it) }
        for(version in versionsToBuild){
            //createVersionFolder(version)
            for(file in dir.listFiles()!!){
                if(file.name != "build.gradle.kts" && file.name != "build"){
                    val newFile = File("${rootDir}/project-${version}/${file.name}")
                    if(!newFile.exists()){
                        file.copyRecursively(newFile)
                        if(file.isDirectory && file.name == "src") {
                            val pluginFile = File(file.absolutePath + "/main/resources/plugin.yml")
                            if(pluginFile.exists()){
                                val newPluginFile = File("${rootDir}/project-${version}/${file.name}/main/resources/plugin.yml")
                                val content = pluginFile.readText().replace(Regex("(api-version: +)[\"'][0-9.]+[\"']"), "$1\"${version}\"")
                                newPluginFile.writeText(content)
                            }
                        }

                    }
                }

                else if(file.name == "build.gradle.kts"){
                    val newFile = File("${rootDir}/project-${version}/${file.name}")
                    if(!newFile.exists()){
                        file.copyRecursively(newFile)
                    }
                    val content = newFile.readText()
                    var newContent: String
                    if(version == "1.18"){
                        newContent = content.replace(Regex("(jvmTarget *= *)\"[0-9]+\""), "$1 \"17\"").replace(Regex("JavaVersion.VERSION_[0-9_]+"), "JavaVersion.VERSION_17")
                    }
                    else if(version == "1.17"){
                        newContent = content.replace(Regex("(jvmTarget *= *)\"[0-9]+\""), "$1 \"16\"").replace(Regex("JavaVersion.VERSION_[0-9_]+"), "JavaVersion.VERSION_16")
                    }
                    else if(version == "1.16"){
                        newContent = content.replace(Regex("(jvmTarget *= *)\"[0-9]+\""), "$1 \"11\"").replace(Regex("JavaVersion.VERSION_[0-9_]+"), "JavaVersion.VERSION_11")
                    }
                    else{
                        newContent = content.replace(Regex("(jvmTarget *= *)\"[0-9]+\""), "$1 \"1.8\"").replace(Regex("JavaVersion.VERSION_[0-9_]+"), "JavaVersion.VERSION_1_8")
                    }
                    if(version != "1.16") {
                        newContent = newContent.replace(Regex("\"org.spigotmc:spigot-api:.+-R0.1-SNAPSHOT\""), "\"org.spigotmc:spigot-api:$version-R0.1-SNAPSHOT\"")
                    }
                    else {
                        newContent = newContent.replace(Regex("\"org.spigotmc:spigot-api:.+-R0.1-SNAPSHOT\""), "\"org.spigotmc:spigot-api:1.16.4-R0.1-SNAPSHOT\"")
                    }
                    newFile.writeText(newContent)
                }


            }
            val mainSettingFile = File(rootDir.absolutePath+"/settings.gradle.kts")
            if(mainSettingFile.readLines().all { !it.contains("include(\"project-${version}\")") }){
                mainSettingFile.appendText("\ninclude(\"project-${version}\")")
            }
        }
    }

    fun createVersionFolder(version: String){
        val rootDir = project.rootDir
        val folder = File(rootDir.path+"/project-$version")
        if(!folder.exists()) folder.mkdirs()
    }
}
tasks.register<MultiVersionPlugin>("multiVersionPlugin")

open class moveBuilds : DefaultTask() {
    override fun getGroup(): String {
        return "application"
    }
    @TaskAction
    fun move(){
        val rootDir = project.rootDir
        project.projectDir
        if(!File(rootDir.absolutePath+"/builds").exists()) File(rootDir.absolutePath+"/builds").mkdirs()
        rootDir.listFiles()!!.filter { it.name.matches(Regex("project-[0-9.]+")) }.forEach {
            val version = it.name.replace("project-", "")
            println(rootDir.absolutePath+"/builds")
            try{
                File(it.absolutePath+"/build/libs/").listFiles()?.find { x -> x.name.contains("jar") }!!.copyTo(File(rootDir.absolutePath+"/build/$version.jar"))
            }catch (ignored: Exception){}
        }
    }
}

tasks.register<moveBuilds>("moveBuilds")